// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int              @id @default(autoincrement())
  fullName          String
  email             String           @unique
  password          String
  role              Role?
  phone             String?
  birthdate         String?
  city              String
  address           String
  zipcode           String?
  avatar            String           @default("https://st3.depositphotos.com/9998432/13335/v/450/depositphotos_133351928-stock-illustration-default-placeholder-man-and-woman.jpg")
  longitude         Float?
  latitude          Float?
  tasks             Task[]
  services          Service[]
  applications      Application[]
  profile           Profile?
  favouriteTasks    FavouriteTasks[]
  hirings           Hiring[]
  Participant       Participant[]
  messages          Message[]
  notifications     Notification[]   @relation("notifications")
  sentNotifications Notification[]   @relation("sentNotifications")
}

enum Role {
  client
  professional
  admin
}

model Task {
  id             Int              @id @default(autoincrement())
  title          String
  description    String
  location       String
  minPrice       String
  maxPrice       String
  dueDate        String
  urgency        Urgency
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  client         User?            @relation(fields: [clientId], references: [id])
  clientId       Int?
  applications   Application[]
  skills         Skill[]          @relation("TaskSkill")
  favouriteTasks FavouriteTasks[]
  longitude      Float?
  latitude       Float?
}

enum Urgency {
  high
  low
  medium
}

model Application {
  id          Int      @id @default(autoincrement())
  task        Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId      Int
  applicant   User?    @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId Int
  price       Float?
  status      Status
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Status {
  Pending
  Accepted
  Rejected
  Complete
}

model Skill {
  id       Int       @id @default(autoincrement())
  name     String
  tasks    Task[]    @relation("TaskSkill")
  profiles Profile[] @relation("ProfileSkill")
  services Service[] @relation("ServiceSkill")
}

model Profile {
  id              Int     @id @default(autoincrement())
  jobTitle        String
  bio             String
  isVerified      Boolean @default(false)
  officalDocument String?
  cinRecto        String
  cinVerso        String
  user            User    @relation(fields: [userId], references: [id])
  userId          Int     @unique
  skills          Skill[] @relation("ProfileSkill")
}

model Service {
  id             Int      @id @default(autoincrement())
  title          String
  description    String
  location       String
  price          Int
  availability   String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  professional   User?    @relation(fields: [professionalId], references: [id])
  professionalId Int?
  skills         Skill[]  @relation("ServiceSkill")
  hirings        Hiring[]
  status         String   @default("available")
  longitude      Float?
  latitude       Float?
}

model FavouriteTasks {
  user   User @relation(fields: [userId], references: [id])
  userId Int
  task   Task @relation(fields: [taskId], references: [id])
  taskId Int

  @@id([userId, taskId])
}

model Hiring {
  id        Int     @id @default(autoincrement())
  serviceId Int
  clientId  Int
  price     Int
  status    Status?
  service   Service @relation(fields: [serviceId], references: [id])
  client    User    @relation(fields: [clientId], references: [id])
}

// model Rating {
//   id                 Int   @id @default(autoincrement())
//   clientId           Int
//   professionalId     Int
//   ClientRating       User  @relation("ClientRating", fields: [clientId], references: [id])
//   ProfessionalRating User  @relation("ProfessionalRating", fields: [professionalId], references: [id])
//   rate               Int
//   User               User? @relation(fields: [userId], references: [id])
//   userId             Int?
//   User               User? @relation(fields: [userId], references: [id])
//   User               User? @relation(fields: [userId], references: [id])
// }

model Conversation {
  id           Int           @id @default(autoincrement())
  participants Participant[]
  messages     Message[]
}

model Participant {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int

  @@unique([userId, conversationId])
}

model Message {
  id             Int          @id @default(autoincrement())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  sender         User         @relation(fields: [senderId], references: [id])
  senderId       Int
  type           MessageType  @default(text)
  content        String
  createdAt      DateTime     @default(now())
}

enum MessageType {
  text
  image
}

model Notification {
  id             Int              @id @default(autoincrement())
  message        String
  type           NotificationType
  targetEntityId Int
  user           User             @relation("notifications", fields: [userId], references: [id])
  userId         Int
  notifier       User?            @relation("sentNotifications", fields: [notifierId], references: [id])
  notifierId     Int?
  isRead         Boolean          @default(false)
  createdAt      DateTime         @default(now())
}

enum NotificationType {
  Application
  Message
  Acceptance
  Completion
  Hiring
}
